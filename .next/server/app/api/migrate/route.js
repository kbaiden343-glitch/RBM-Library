"use strict";(()=>{var e={};e.id=896,e.ids=[896],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},855:(e,a,t)=>{t.r(a),t.d(a,{originalPathname:()=>D,patchFetch:()=>f,requestAsyncStorage:()=>m,routeModule:()=>d,serverHooks:()=>g,staticGenerationAsyncStorage:()=>p});var s={};t.r(s),t.d(s,{POST:()=>u});var r=t(9303),i=t(8716),n=t(670),o=t(7070),l=t(2663),c=t(8691);async function u(e){try{console.log("\uD83D\uDE80 Starting database migration and initialization..."),await l._.$connect(),console.log("✅ Database connection successful");let e=!1;try{await l._.user.findFirst(),e=!0,console.log("✅ Users table exists")}catch(e){console.log("⚠️ Users table does not exist, will create admin user after migration")}let a=!1;if(e){let e=await l._.user.findFirst({where:{role:"ADMIN"}});e&&(a=!0,console.log("✅ Admin user already exists:",e.email))}if(!a){console.log("\uD83D\uDC64 Creating default admin user...");let e=await c.ZP.hash("admin123",12),a=await l._.user.create({data:{name:"Admin User",email:"admin@library.com",password:e,role:"ADMIN"}});return console.log("✅ Admin user created successfully!"),console.log("\uD83D\uDCE7 Email:",a.email),console.log("\uD83D\uDD11 Password: admin123"),o.NextResponse.json({success:!0,message:"Database migration and admin user creation completed",adminEmail:a.email,adminPassword:"admin123",warning:"Please change the admin password after first login!"})}return o.NextResponse.json({success:!0,message:"Database is already initialized",adminEmail:"admin@library.com",adminPassword:"admin123"})}catch(e){if(console.error("❌ Database migration error:",e),e.message&&e.message.includes("prepared statement"))return o.NextResponse.json({success:!1,error:"Prepared statement conflict detected. Please run database migration manually.",suggestion:"Run: npx prisma migrate deploy"},{status:500});return o.NextResponse.json({success:!1,error:"Database migration failed",details:e.message},{status:500})}finally{await l._.$disconnect()}}let d=new r.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/migrate/route",pathname:"/api/migrate",filename:"route",bundlePath:"app/api/migrate/route"},resolvedPagePath:"C:\\Users\\USER\\Desktop\\Library Project\\app\\api\\migrate\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:p,serverHooks:g}=d,D="/api/migrate/route";function f(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:p})}},2663:(e,a,t)=>{let s;t.d(a,{_:()=>s});let r=require("@prisma/client"),i=globalThis,n=process.env.DATABASE_URL||process.env.POSTGRES_URL||process.env.POSTGRES_PRISMA_URL,o=n?`${n}?connection_limit=1&pool_timeout=20&connect_timeout=60&schema=public&pgbouncer=true&prepared_statements=false`:n;try{s=i.prisma??new r.PrismaClient({log:["error"],datasources:{db:{url:o}}})}catch(e){console.warn("Prisma client not available, using fallback:",e),s={}}}};var a=require("../../../webpack-runtime.js");a.C(e);var t=e=>a(a.s=e),s=a.X(0,[948,972,691],()=>t(855));module.exports=s})();