"use strict";(()=>{var e={};e.id=824,e.ids=[824],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7127:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>d,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{GET:()=>p,POST:()=>c});var n=r(9303),a=r(8716),o=r(670),i=r(7070),l=r(2663);async function p(e){try{let{searchParams:t}=new URL(e.url),r=parseInt(t.get("page")||"1"),s=parseInt(t.get("limit")||"50"),n=t.get("search")||"",a=t.get("personType")||"",o=(t.get("occupationType"),t.get("status")||""),p=(r-1)*s,c={};n&&(c.OR=[{name:{contains:n,mode:"insensitive"}},{email:{contains:n,mode:"insensitive"}},{phone:{contains:n,mode:"insensitive"}}]),a&&"all"!==a&&(c.personType=a),o&&"all"!==o&&(c.status=o);let[u,d]=await Promise.all([l._.person.findMany({where:c,skip:p,take:s,orderBy:{createdAt:"desc"}}),l._.person.count({where:c})]);return i.NextResponse.json({persons:u,pagination:{page:r,limit:s,total:d,pages:Math.ceil(d/s)}})}catch(e){return console.error("Get persons error:",e),i.NextResponse.json({error:"Failed to fetch persons"},{status:500})}}async function c(e){try{let{name:t,email:r,phone:s,address:n,personType:a,occupationType:o,notes:p,emergencyContact:c}=await e.json();if(!t||!r)return i.NextResponse.json({error:"Name and email are required"},{status:400});let u=await l._.person.findUnique({where:{email:r}});if(u)return i.NextResponse.json({error:`A ${u.personType.toLowerCase()} with email "${r}" already exists`,details:`Person: ${u.name}`},{status:409});let d=null;try{d=await l._.member.findUnique({where:{email:r}})}catch(e){console.log("Legacy members table check skipped:",e)}if(d)return i.NextResponse.json({error:`A member with email "${r}" already exists in the legacy system`,details:`Member: ${d.name}`},{status:409});let m={name:t,email:r,phone:s||null,address:n||null,personType:a||"VISITOR",notes:p||null,emergencyContact:c||null,membershipDate:"MEMBER"===a?new Date:null},g=await l._.person.create({data:m});return console.log("Person created successfully:",{id:g.id,name:g.name,email:g.email,personType:g.personType}),i.NextResponse.json(g,{status:201})}catch(e){if(console.error("Create person error:",e),e instanceof Error){if(e.message.includes("Unique constraint failed"))return i.NextResponse.json({error:"A person with this email already exists"},{status:409});if(e.message.includes("Max client connections reached")||e.message.includes("connection pool"))return i.NextResponse.json({error:"Database temporarily unavailable. Please try again in a moment.",details:"Connection pool limit reached"},{status:503})}return i.NextResponse.json({error:"Failed to create person",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let u=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/persons/route",pathname:"/api/persons",filename:"route",bundlePath:"app/api/persons/route"},resolvedPagePath:"C:\\Users\\USER\\Desktop\\Library Project\\app\\api\\persons\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:g}=u,h="/api/persons/route";function y(){return(0,o.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},2663:(e,t,r)=>{let s;r.d(t,{_:()=>s});let n=require("@prisma/client"),a=globalThis,o=process.env.DATABASE_URL||process.env.POSTGRES_URL||process.env.POSTGRES_PRISMA_URL,i=o?`${o}?connection_limit=1&pool_timeout=20&connect_timeout=60&schema=public&pgbouncer=true&prepared_statements=false`:o;try{s=a.prisma??new n.PrismaClient({log:["error"],datasources:{db:{url:i}}})}catch(e){console.warn("Prisma client not available, using fallback:",e),s={}}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[948,972],()=>r(7127));module.exports=s})();