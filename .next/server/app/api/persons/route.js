"use strict";(()=>{var e={};e.id=824,e.ids=[824],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7127:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>d,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var s={};t.r(s),t.d(s,{GET:()=>l,POST:()=>c});var n=t(9303),o=t(8716),a=t(670),i=t(7070),p=t(2663);async function l(e){try{let{searchParams:r}=new URL(e.url),t=parseInt(r.get("page")||"1"),s=parseInt(r.get("limit")||"50"),n=r.get("search")||"",o=r.get("personType")||"",a=(r.get("occupationType"),r.get("status")||""),l=(t-1)*s,c={};n&&(c.OR=[{name:{contains:n,mode:"insensitive"}},{email:{contains:n,mode:"insensitive"}},{phone:{contains:n,mode:"insensitive"}}]),o&&"all"!==o&&(c.personType=o),a&&"all"!==a&&(c.status=a);let[u,d]=await Promise.all([p._.person.findMany({where:c,skip:l,take:s,orderBy:{createdAt:"desc"}}),p._.person.count({where:c})]);return i.NextResponse.json({persons:u,pagination:{page:t,limit:s,total:d,pages:Math.ceil(d/s)}})}catch(e){return console.error("Get persons error:",e),i.NextResponse.json({error:"Failed to fetch persons"},{status:500})}}async function c(e){try{let{name:r,email:t,phone:s,address:n,personType:o,occupationType:a,notes:l,emergencyContact:c}=await e.json();if(!r||!t)return i.NextResponse.json({error:"Name and email are required"},{status:400});let u=await p._.person.findUnique({where:{email:t}});if(u)return i.NextResponse.json({error:`A ${u.personType.toLowerCase()} with email "${t}" already exists`,details:`Person: ${u.name}`},{status:409});let d={name:r,email:t,phone:s||null,address:n||null,personType:o||"VISITOR",notes:l||null,emergencyContact:c||null,membershipDate:"MEMBER"===o?new Date:null},m=await p._.person.create({data:d});return console.log("Person created successfully:",{id:m.id,name:m.name,email:m.email,personType:m.personType}),i.NextResponse.json(m,{status:201})}catch(e){if(console.error("Create person error:",e),e instanceof Error){if(e.message.includes("Unique constraint failed"))return i.NextResponse.json({error:"A person with this email already exists"},{status:409});if(e.message.includes("Max client connections reached")||e.message.includes("connection pool"))return i.NextResponse.json({error:"Database temporarily unavailable. Please try again in a moment.",details:"Connection pool limit reached"},{status:503})}return i.NextResponse.json({error:"Failed to create person",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let u=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/persons/route",pathname:"/api/persons",filename:"route",bundlePath:"app/api/persons/route"},resolvedPagePath:"C:\\Users\\USER\\Desktop\\Library Project\\app\\api\\persons\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:g}=u,h="/api/persons/route";function y(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},2663:(e,r,t)=>{let s;t.d(r,{_:()=>s});let n=require("@prisma/client"),o=globalThis,a=process.env.DATABASE_URL||process.env.POSTGRES_URL||process.env.POSTGRES_PRISMA_URL,i=a?`${a}?connection_limit=1&pool_timeout=20&connect_timeout=60&schema=public&pgbouncer=true&prepared_statements=false`:a;try{s=o.prisma??new n.PrismaClient({log:["error"],datasources:{db:{url:i}}})}catch(e){console.warn("Prisma client not available, using fallback:",e),s={}}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[948,972],()=>t(7127));module.exports=s})();