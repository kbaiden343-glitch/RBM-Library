"use strict";(()=>{var e={};e.id=665,e.ids=[665],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2600:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>w,patchFetch:()=>j,requestAsyncStorage:()=>f,routeModule:()=>R,serverHooks:()=>h,staticGenerationAsyncStorage:()=>x});var s={};t.r(s),t.d(s,{DELETE:()=>v,GET:()=>d,PUT:()=>c});var o=t(9303),n=t(8716),a=t(670),i=t(7070),u=t(2663);async function d(e,{params:r}){try{let e=await u._.reservation.findUnique({where:{id:r.id},include:{book:!0,person:!0}});if(!e)return i.NextResponse.json({error:"Reservation not found"},{status:404});return i.NextResponse.json(e)}catch(e){return console.error("Get reservation error:",e),i.NextResponse.json({error:"Failed to fetch reservation"},{status:500})}}async function c(e,{params:r}){try{let{action:t}=await e.json();if("cancel"===t)return await l(r.id);if("ready"===t)return await p(r.id);return i.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("Update reservation error:",e),i.NextResponse.json({error:"Failed to update reservation"},{status:500})}}async function l(e){try{let r=await u._.reservation.findUnique({where:{id:e},include:{book:!0}});if(!r)return i.NextResponse.json({error:"Reservation not found"},{status:404});if("WAITING"!==r.status)return i.NextResponse.json({error:"Only waiting reservations can be cancelled"},{status:400});let t=await u._.reservation.update({where:{id:e},data:{status:"CANCELLED"},include:{book:!0,person:!0}});return"RESERVED"===r.book.status&&await u._.book.update({where:{id:r.bookId},data:{status:"AVAILABLE"}}),i.NextResponse.json(t)}catch(e){return console.error("Cancel reservation error:",e),i.NextResponse.json({error:"Failed to cancel reservation"},{status:500})}}async function p(e){try{let r=await u._.reservation.findUnique({where:{id:e},include:{book:!0}});if(!r)return i.NextResponse.json({error:"Reservation not found"},{status:404});if("WAITING"!==r.status)return i.NextResponse.json({error:"Only waiting reservations can be marked as ready"},{status:400});let t=await u._.reservation.update({where:{id:e},data:{status:"READY"},include:{book:!0,person:!0}});return i.NextResponse.json(t)}catch(e){return console.error("Mark reservation ready error:",e),i.NextResponse.json({error:"Failed to mark reservation as ready"},{status:500})}}async function v(e,{params:r}){try{let e=await u._.reservation.findUnique({where:{id:r.id},include:{book:!0}});if(!e)return i.NextResponse.json({error:"Reservation not found"},{status:404});if("CANCELLED"!==e.status)return i.NextResponse.json({error:"Cannot delete active reservation"},{status:400});return await u._.reservation.delete({where:{id:r.id}}),i.NextResponse.json({message:"Reservation deleted successfully"})}catch(e){return console.error("Delete reservation error:",e),i.NextResponse.json({error:"Failed to delete reservation"},{status:500})}}let R=new o.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/reservations/[id]/route",pathname:"/api/reservations/[id]",filename:"route",bundlePath:"app/api/reservations/[id]/route"},resolvedPagePath:"C:\\Users\\USER\\Desktop\\Library Project\\app\\api\\reservations\\[id]\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:f,staticGenerationAsyncStorage:x,serverHooks:h}=R,w="/api/reservations/[id]/route";function j(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:x})}},2663:(e,r,t)=>{let s;t.d(r,{_:()=>s});let o=require("@prisma/client"),n=globalThis,a=process.env.DATABASE_URL||process.env.POSTGRES_URL||process.env.POSTGRES_PRISMA_URL,i=a?`${a}?connection_limit=1&pool_timeout=20&connect_timeout=60&schema=public&pgbouncer=true&prepared_statements=false`:a;try{s=n.prisma??new o.PrismaClient({log:["error"],datasources:{db:{url:i}}})}catch(e){console.warn("Prisma client not available, using fallback:",e),s={}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[948,972],()=>t(2600));module.exports=s})();