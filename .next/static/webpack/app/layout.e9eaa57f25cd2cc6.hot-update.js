"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"0208f781cfa5\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzM5YzciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIwMjA4Zjc4MWNmYTVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/context/LibraryContext.tsx":
/*!****************************************!*\
  !*** ./app/context/LibraryContext.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibraryProvider: function() { return /* binding */ LibraryProvider; },\n/* harmony export */   useLibrary: function() { return /* binding */ useLibrary; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ LibraryProvider,useLibrary auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst LibraryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst initialState = {\n    books: [],\n    members: [],\n    borrowings: [],\n    reservations: [],\n    attendance: [],\n    currentUser: null,\n    loading: false,\n    error: null\n};\nconst libraryReducer = (state, action)=>{\n    switch(action.type){\n        case \"SET_LOADING\":\n            return {\n                ...state,\n                loading: action.payload\n            };\n        case \"SET_ERROR\":\n            return {\n                ...state,\n                error: action.payload\n            };\n        case \"SET_BOOKS\":\n            return {\n                ...state,\n                books: action.payload\n            };\n        case \"ADD_BOOK\":\n            return {\n                ...state,\n                books: [\n                    ...state.books,\n                    action.payload\n                ]\n            };\n        case \"UPDATE_BOOK\":\n            return {\n                ...state,\n                books: state.books.map((book)=>book.id === action.payload.id ? action.payload : book)\n            };\n        case \"DELETE_BOOK\":\n            return {\n                ...state,\n                books: state.books.filter((book)=>book.id !== action.payload)\n            };\n        case \"SET_MEMBERS\":\n            return {\n                ...state,\n                members: action.payload\n            };\n        case \"ADD_MEMBER\":\n            return {\n                ...state,\n                members: [\n                    ...state.members,\n                    action.payload\n                ]\n            };\n        case \"UPDATE_MEMBER\":\n            return {\n                ...state,\n                members: state.members.map((member)=>member.id === action.payload.id ? action.payload : member)\n            };\n        case \"DELETE_MEMBER\":\n            return {\n                ...state,\n                members: state.members.filter((member)=>member.id !== action.payload)\n            };\n        case \"SET_BORROWINGS\":\n            return {\n                ...state,\n                borrowings: action.payload\n            };\n        case \"ADD_BORROWING\":\n            return {\n                ...state,\n                borrowings: [\n                    ...state.borrowings,\n                    action.payload\n                ]\n            };\n        case \"RETURN_BOOK\":\n            return {\n                ...state,\n                borrowings: state.borrowings.map((borrowing)=>borrowing.id === action.payload.id ? action.payload : borrowing)\n            };\n        case \"SET_RESERVATIONS\":\n            return {\n                ...state,\n                reservations: action.payload\n            };\n        case \"ADD_RESERVATION\":\n            return {\n                ...state,\n                reservations: [\n                    ...state.reservations,\n                    action.payload\n                ]\n            };\n        case \"SET_ATTENDANCE\":\n            return {\n                ...state,\n                attendance: action.payload\n            };\n        case \"ADD_ATTENDANCE\":\n            return {\n                ...state,\n                attendance: [\n                    ...state.attendance,\n                    action.payload\n                ]\n            };\n        case \"SET_CURRENT_USER\":\n            return {\n                ...state,\n                currentUser: action.payload\n            };\n        default:\n            return state;\n    }\n};\n// API helper functions\nconst apiCall = async function(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const token = localStorage.getItem(\"token\");\n    const response = await fetch(url, {\n        ...options,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...token && {\n                Authorization: \"Bearer \".concat(token)\n            },\n            ...options.headers\n        }\n    });\n    if (!response.ok) {\n        const error = await response.json();\n        console.error(\"API Error:\", error);\n        throw new Error(error.error || \"API call failed\");\n    }\n    return response.json();\n};\nconst LibraryProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(libraryReducer, initialState);\n    // Fetch functions\n    const fetchBooks = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await apiCall(\"/api/books\");\n            dispatch({\n                type: \"SET_BOOKS\",\n                payload: data.books || data\n            });\n        } catch (error) {\n            console.error(\"Error fetching books:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to fetch books\"\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to fetch books\");\n        } finally{\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const fetchMembers = async ()=>{\n        try {\n            var _data_persons;\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            // Use the new persons API and fetch all person types for borrowing\n            const data = await apiCall(\"/api/persons?limit=100\");\n            // Convert persons to member format for backward compatibility\n            const membersData = ((_data_persons = data.persons) === null || _data_persons === void 0 ? void 0 : _data_persons.map((person)=>({\n                    id: person.id,\n                    name: person.name,\n                    email: person.email,\n                    phone: person.phone || \"\",\n                    address: person.address || \"\",\n                    membershipDate: person.membershipDate || person.createdAt,\n                    status: person.status === \"ACTIVE\" ? \"ACTIVE\" : \"INACTIVE\",\n                    personType: person.personType,\n                    createdAt: person.createdAt,\n                    updatedAt: person.updatedAt\n                }))) || [];\n            dispatch({\n                type: \"SET_MEMBERS\",\n                payload: membersData\n            });\n        } catch (error) {\n            console.error(\"Error fetching members:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to fetch members\"\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to fetch members\");\n        } finally{\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const fetchBorrowings = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await apiCall(\"/api/borrowings\");\n            dispatch({\n                type: \"SET_BORROWINGS\",\n                payload: data.borrowings || data\n            });\n        } catch (error) {\n            console.error(\"Error fetching borrowings:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to fetch borrowings\"\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to fetch borrowings\");\n        } finally{\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const fetchReservations = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await apiCall(\"/api/reservations\");\n            dispatch({\n                type: \"SET_RESERVATIONS\",\n                payload: data.reservations || data\n            });\n        } catch (error) {\n            console.error(\"Error fetching reservations:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to fetch reservations\"\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to fetch reservations\");\n        } finally{\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const fetchAttendance = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await apiCall(\"/api/attendance\");\n            dispatch({\n                type: \"SET_ATTENDANCE\",\n                payload: data.attendance || data\n            });\n        } catch (error) {\n            console.error(\"Error fetching attendance:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to fetch attendance\"\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to fetch attendance\");\n        } finally{\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    // Manual data loading - no automatic fetching\n    // Data will be fetched only when specific pages/components request it\n    // This prevents unnecessary API calls and improves performance\n    const value = {\n        state,\n        dispatch,\n        // Book operations\n        addBook: async (book)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                console.log(\"Adding book with data:\", book);\n                const newBook = await apiCall(\"/api/books\", {\n                    method: \"POST\",\n                    body: JSON.stringify(book)\n                });\n                dispatch({\n                    type: \"ADD_BOOK\",\n                    payload: newBook\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book added successfully!\");\n            } catch (error) {\n                var _error_message, _error_message1;\n                console.error(\"Error adding book:\", error);\n                // Only show toast for user-initiated actions, not sample data initialization\n                if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"already exists\")) && !((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"already exists\"))) {\n                    const errorMessage = error.message || \"Failed to add book\";\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(errorMessage);\n                }\n                throw error // Re-throw to let the component handle it\n                ;\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        updateBook: async (book)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                const updatedBook = await apiCall(\"/api/books/\".concat(book.id), {\n                    method: \"PUT\",\n                    body: JSON.stringify(book)\n                });\n                dispatch({\n                    type: \"UPDATE_BOOK\",\n                    payload: updatedBook\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book updated successfully!\");\n            } catch (error) {\n                console.error(\"Error updating book:\", error);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to update book\");\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        deleteBook: async (bookId)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                await apiCall(\"/api/books/\".concat(bookId), {\n                    method: \"DELETE\"\n                });\n                dispatch({\n                    type: \"DELETE_BOOK\",\n                    payload: bookId\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book deleted successfully!\");\n            } catch (error) {\n                console.error(\"Error deleting book:\", error);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to delete book\");\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        // Member operations\n        addMember: async (member)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                // Use the new persons API to create a member\n                const personData = {\n                    name: member.name,\n                    email: member.email,\n                    phone: member.phone,\n                    address: member.address,\n                    personType: member.personType || \"MEMBER\",\n                    status: member.status || \"ACTIVE\"\n                };\n                const newPerson = await apiCall(\"/api/persons\", {\n                    method: \"POST\",\n                    body: JSON.stringify(personData)\n                });\n                // Use the person directly (no conversion needed)\n                dispatch({\n                    type: \"ADD_MEMBER\",\n                    payload: newPerson\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Member added successfully!\");\n            } catch (error) {\n                var _error_message, _error_message1;\n                console.error(\"Error adding member:\", error);\n                // Only show toast for user-initiated actions, not sample data initialization\n                if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"already exists\")) && !((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"already exists\"))) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to add member\");\n                }\n                throw error // Re-throw to let the component handle it\n                ;\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        updateMember: async (member)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                // Use the person data directly for the API\n                const personData = {\n                    name: member.name,\n                    email: member.email,\n                    phone: member.phone,\n                    address: member.address,\n                    personType: member.personType,\n                    status: member.status,\n                    notes: member.notes,\n                    emergencyContact: member.emergencyContact\n                };\n                const updatedPerson = await apiCall(\"/api/persons/\".concat(member.id), {\n                    method: \"PUT\",\n                    body: JSON.stringify(personData)\n                });\n                // Use the person directly (no conversion needed)\n                dispatch({\n                    type: \"UPDATE_MEMBER\",\n                    payload: updatedPerson\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Member updated successfully!\");\n            } catch (error) {\n                console.error(\"Error updating member:\", error);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to update member\");\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        deleteMember: async (memberId)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                await apiCall(\"/api/persons/\".concat(memberId), {\n                    method: \"DELETE\"\n                });\n                dispatch({\n                    type: \"DELETE_MEMBER\",\n                    payload: memberId\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Member deleted successfully!\");\n            } catch (error) {\n                console.error(\"Error deleting member:\", error);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to delete member\");\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        // Borrowing operations\n        borrowBook: async (borrowing)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                const newBorrowing = await apiCall(\"/api/borrowings\", {\n                    method: \"POST\",\n                    body: JSON.stringify(borrowing)\n                });\n                dispatch({\n                    type: \"ADD_BORROWING\",\n                    payload: newBorrowing\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book borrowed successfully!\");\n            } catch (error) {\n                var _error_message, _error_message1;\n                console.error(\"Error borrowing book:\", error);\n                // Only show toast for user-initiated actions, not sample data initialization\n                if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"already\")) && !((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"not found\"))) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to borrow book\");\n                }\n                throw error // Re-throw to let the component handle it\n                ;\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        returnBook: async (borrowingId)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                const updatedBorrowing = await apiCall(\"/api/borrowings/\".concat(borrowingId), {\n                    method: \"PUT\",\n                    body: JSON.stringify({\n                        action: \"return\"\n                    })\n                });\n                dispatch({\n                    type: \"RETURN_BOOK\",\n                    payload: updatedBorrowing\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book returned successfully!\");\n            } catch (error) {\n                console.error(\"Error returning book:\", error);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to return book\");\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        // Reservation operations\n        addReservation: async (reservation)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                const newReservation = await apiCall(\"/api/reservations\", {\n                    method: \"POST\",\n                    body: JSON.stringify(reservation)\n                });\n                dispatch({\n                    type: \"ADD_RESERVATION\",\n                    payload: newReservation\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Book reserved successfully!\");\n            } catch (error) {\n                var _error_message, _error_message1;\n                console.error(\"Error adding reservation:\", error);\n                // Only show toast for user-initiated actions, not sample data initialization\n                if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"already\")) && !((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"not found\"))) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to reserve book\");\n                }\n                throw error // Re-throw to let the component handle it\n                ;\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        // Attendance operations\n        addAttendance: async (attendance)=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                const attendancePayload = {\n                    action: \"check-in\",\n                    personId: attendance.personId,\n                    memberId: attendance.memberId,\n                    visitorName: attendance.visitorName,\n                    visitorEmail: attendance.visitorEmail,\n                    visitorPhone: attendance.visitorPhone\n                };\n                const newAttendance = await apiCall(\"/api/attendance\", {\n                    method: \"POST\",\n                    body: JSON.stringify(attendancePayload)\n                });\n                dispatch({\n                    type: \"ADD_ATTENDANCE\",\n                    payload: newAttendance\n                });\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Attendance recorded successfully!\");\n            } catch (error) {\n                var _error_message, _error_message1;\n                console.error(\"Error adding attendance:\", error);\n                // Only show toast for user-initiated actions, not sample data initialization\n                if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"already\")) && !((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"already checked in\"))) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Failed to record attendance\");\n                }\n                throw error // Re-throw to let the component handle it\n                ;\n            } finally{\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n            }\n        },\n        // AI Recommendation\n        getRecommendations: (memberId)=>{\n            const memberBorrowings = state.borrowings.filter((b)=>b.memberId === memberId);\n            const borrowedBooks = memberBorrowings.map((b)=>state.books.find((book)=>book.id === b.bookId)).filter(Boolean);\n            // Simple recommendation based on category\n            const categories = borrowedBooks.map((book)=>book.category);\n            const mostCommonCategory = categories.sort((a, b)=>categories.filter((v)=>v === a).length - categories.filter((v)=>v === b).length).pop();\n            return state.books.filter((book)=>book.category === mostCommonCategory && !borrowedBooks.some((b)=>b.id === book.id) && book.status === \"AVAILABLE\").slice(0, 3);\n        },\n        // Fetch functions\n        fetchBooks,\n        fetchMembers,\n        fetchBorrowings,\n        fetchReservations,\n        fetchAttendance\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LibraryContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\USER\\\\Desktop\\\\Library Project\\\\app\\\\context\\\\LibraryContext.tsx\",\n        lineNumber: 589,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LibraryProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = LibraryProvider;\nconst useLibrary = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(LibraryContext);\n    if (!context) {\n        throw new Error(\"useLibrary must be used within a LibraryProvider\");\n    }\n    return context;\n};\n_s1(useLibrary, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LibraryProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/context/LibraryContext.tsx\n"));

/***/ })

});